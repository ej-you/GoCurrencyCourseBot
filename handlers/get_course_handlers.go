package handlers

import (
	"fmt"
	"strings"

	telebot "gopkg.in/telebot.v3"

	"github.com/ej-you/GoCurrencyCourseBot/currency_api"
	"github.com/ej-you/GoCurrencyCourseBot/keyboards"
	"github.com/ej-you/GoCurrencyCourseBot/redis"
	"github.com/ej-you/GoCurrencyCourseBot/services"
	"github.com/ej-you/GoCurrencyCourseBot/settings"
)


// –∫–æ–º–∞–Ω–¥–∞ /course
func CourseHandler(context telebot.Context) error {
	if statusNotIs(context, "home") && statusNotIs(context, "chosen_action") && statusNotIs(context, "gotten_historical_course") {
		return nil
	}

	newStatus := "started"
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	err := redis.SetStatus(redisClient, services.GetUserID(context), newStatus)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	msgText := `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å üëá

–ï—Å–ª–∏ –≤–∞–º –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã –∫–æ–¥—ã, —Ç–æ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "—Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /currencies`

	return context.Send(msgText, keyboards.CurrenciesListInlineKeyboard)
}

// –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /course, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Å –Ω–µ—è–≤–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É) –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
func CourseDialogHandler(context telebot.Context) error {
	// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	status, err := redis.GetStatus(redisClient, services.GetUserID(context))
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	switch status {
		case "home":
			return nil
		// –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã–ª—é—Ç—ã  –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
		case "started":
			return ChooseCurrency(context)
		case "chosen_currency":
			return nil
		case "chosen_action":
			return nil
		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ—ë
		case "choose_date":
			return ChooseDate(context)
		case "gotten_historical_course":
			return nil
		default:
			return nil
	}
}


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–æ–º –≤–∞–ª—é—Ç—ã
func ChooseCurrency(context telebot.Context) error {
	if statusNotIs(context, "started") {
		return nil
	}

	newStatus := "chosen_currency"
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	err := redis.SetStatus(redisClient, services.GetUserID(context), newStatus)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	// –¥–æ—Å—Ç–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ callback'–∞ (—Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ \f)
	chosenCurrency := strings.TrimPrefix(context.Callback().Data, "\f")

	// –∑–∞–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –≤–∞–ª—é—Ç—ã –≤ redis
	err = redis.SetChosenCurrency(redisClient, services.GetUserID(context), chosenCurrency)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	msgText := fmt.Sprintf("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: %s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", chosenCurrency)
	return context.Send(msgText, keyboards.ActionInlineKeyboard)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã —é–∑–µ—Ä—É
func ActualCourseHandler(context telebot.Context) error {
	if statusNotIs(context, "chosen_currency") {
		return nil
	}

	newStatus := "chosen_action"
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	err := redis.SetStatus(redisClient, services.GetUserID(context), newStatus)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –≤–∞–ª—é—Ç—ã –∏–∑ redis
	chosenCurrencyCode, err := redis.GetChosenCurrency(redisClient, services.GetUserID(context))
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ API
	latestCurse, err := currency_api.GetLatestCourse(chosenCurrencyCode)
	if err != nil {
		return context.Send(notFoundCurrencyMessage, keyboards.BackToHomeInlineKeyboard)
	}

	msgText := fmt.Sprintf("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å %s - %.2f ‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", chosenCurrencyCode, latestCurse)
	return context.Send(msgText, keyboards.GottenCourseInlineKeyboard)
}

// –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∑–∞ –Ω–µ—ë
func HistoricalCourseHandler(context telebot.Context) error {
	if statusNotIs(context, "chosen_currency") {
		return nil
	}

	newStatus := "choose_date"
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	err := redis.SetStatus(redisClient, services.GetUserID(context), newStatus)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	msgText := `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì.
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 23 –∏—é–ª—è 2016 –≥–æ–¥–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ 23/07/2016

‚ùóÔ∏è–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Å ` + settings.LowDate + " –ø–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"

	return context.Send(msgText)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –¥–∞—Ç—ã
func ChooseDate(context telebot.Context) error {
	if statusNotIs(context, "choose_date") {
		return nil
	}

	// —á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ (—Ç–∞–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞—Ç–∞)
	date := context.Message().Text

	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
	err := services.CheckDate(date)
	// –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –ø—Ä–æ—Å–∏–º —é–∑–µ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –µ—ë –µ—â—ë —Ä–∞–∑
	if err != nil {
		return context.Send(invalidDateMessage)
	}

	newStatus := "gotten_historical_course"
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞
	err = redis.SetStatus(redisClient, services.GetUserID(context), newStatus)
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –≤–∞–ª—é—Ç—ã –∏–∑ redis
	chosenCurrencyCode, err := redis.GetChosenCurrency(redisClient, services.GetUserID(context))
	if err != nil {
		return context.Send(errorMessage, keyboards.BackToHomeInlineKeyboard)
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–∑ API
	dateCurse, err := currency_api.GetDateCourse(chosenCurrencyCode, date)
	if err != nil {
		return context.Send(notFoundCurrencyMessage, keyboards.BackToHomeInlineKeyboard)
	}

	msgText := fmt.Sprintf("–ö—É—Ä—Å %s –∑–∞ %s - %.2f ‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", chosenCurrencyCode, date, dateCurse)
	return context.Send(msgText, keyboards.GottenCourseInlineKeyboard)
}
